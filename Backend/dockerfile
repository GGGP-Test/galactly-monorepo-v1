# ---------- build stage ----------
FROM node:20-bookworm AS build
WORKDIR /app

# native deps for better-sqlite3
RUN apt-get update && apt-get install -y python3 make g++ \
  && rm -rf /var/lib/apt/lists/*

# copy only Backend manifests first for better caching
COPY Backend/package*.json Backend/tsconfig.json* ./Backend/

# install deps in Backend
WORKDIR /app/Backend
# use lockfile if present; fall back to install otherwise
RUN if [ -f package-lock.json ]; then npm ci; else npm install; fi

# make sure TS toolchain exists even if not declared
RUN npm i -D typescript ts-node --no-save

# bring in the rest of Backend sources
COPY Backend/ /app/Backend/

# if there is no tsconfig.json in Backend, create a minimal one
RUN test -f tsconfig.json || printf '%s\n' \
'{ "compilerOptions": { "target":"ES2020","module":"ES2022","moduleResolution":"node","rootDir":"src","outDir":"dist","esModuleInterop":true,"skipLibCheck":true }, "include":["src/**/*.ts","*.ts"] }' \
> tsconfig.json

# compile TS → Backend/dist
RUN npx tsc -p .

# keep only production deps
RUN npm prune --omit=dev

# ---------- runtime stage ----------
FROM node:20-bookworm AS runtime
WORKDIR /app

# native deps for better-sqlite3 at runtime
RUN apt-get update && apt-get install -y python3 make g++ \
  && rm -rf /var/lib/apt/lists/*

ENV NODE_ENV=production
ENV PORT=8787

# copy compiled backend + node_modules
COPY --from=build /app/Backend/dist /app/Backend/dist
COPY --from=build /app/Backend/node_modules /app/Backend/node_modules

# (optional) copy static frontend files at repo root if you serve them here
COPY api-base.js ./api-base.js
COPY engines.html ./engines.html
COPY free-panel.html ./free-panel.html
COPY index.html ./index.html
COPY onboarding ./onboarding
COPY store.html ./store.html
COPY style.css ./style.css
COPY sw.js ./sw.js

EXPOSE 8787

# Start compiled API. Your entry lives in Backend/src/index.ts → Backend/dist/index.js
CMD ["node", "Backend/dist/index.js"]
