name: buyers-smoke

on:
  workflow_dispatch:
    inputs:
      api_url:
        description: "Northflank API URL to POST (…/api/v1/leads/find-buyers)"
        required: true
      api_key:
        description: "x-api-key for backend"
        required: true
      supplier:
        description: "Supplier domain"
        required: true
        default: peekpackaging.com
      region:
        description: "Region code (usca, us, ca, any)"
        required: true
        default: usca
      radiusMi:
        description: "Radius miles"
        required: true
        default: "50"
  push:
    branches: [ main ]

jobs:
  smoke:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Write smoke runner (backend/scripts/find-buyers-smoke.mjs)
        run: |
          mkdir -p scripts
          cat > scripts/find-buyers-smoke.mjs <<'EOF'
          // backend/scripts/find-buyers-smoke.mjs
          // Calls /api/v1/leads/find-buyers and writes ./smoke.json (canonical)
          const API = process.env.API_URL || "";
          const KEY = process.env.API_KEY || process.env.X_API_KEY || "";
          const domain = process.env.SUPPLIER || "";
          const region = (process.env.REGION || "usca").toLowerCase();
          const radiusMi = Number(process.env.RADIUS_MI || "50");

          if (!API || !API.startsWith("http")) {
            console.error("ERR: set API_URL to https://…/api/v1/leads/find-buyers");
            process.exit(2);
          }
          if (!domain) {
            console.error("ERR: set SUPPLIER (domain) env");
            process.exit(2);
          }

          const body = {
            supplier: domain,
            region,
            radiusMi,
            persona: {
              offer: process.env.OFFER || "",
              solves: process.env.SOLVES || "",
              titles: process.env.TITLES || ""
            }
          };

          (async () => {
            const t0 = Date.now();
            let res, text = "";
            try {
              res = await fetch(API, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  ...(KEY ? { "x-api-key": KEY } : {})
                },
                body: JSON.stringify(body)
              });
              text = await res.text();
            } catch (e) {
              const out = {
                ok: false,
                at: 0,
                api: API,
                host: (() => { try { return new URL(API).host } catch { return "" }})(),
                env: { region, radiusMi, domain },
                steps: { call: { error: String(e) } }
              };
              await Bun.write("smoke.json", JSON.stringify(out, null, 2));
              console.log(JSON.stringify(out, null, 2));
              process.exit(1);
            }

            const ct = res.headers.get("content-type") || "";
            const payload = ct.includes("application/json")
              ? (()=>{ try { return JSON.parse(text) } catch { return { parseError:true, raw:text }}})()
              : { raw: text };

            const out = {
              ok: res.ok,
              at: res.status,
              api: API,
              host: new URL(API).host,
              env: { region, radiusMi, domain },
              steps: {
                call: {
                  status: res.status,
                  ms: Date.now() - t0,
                  sent: body,
                  received: payload
                }
              },
              note: (!res.ok ? "transport error" :
                     ((Number(payload?.created||0)===0) && (!Array.isArray(payload?.candidates) || payload.candidates.length===0))
                       ? "ok=true but empty (discovery disabled / persona empty / filters removed everything)"
                       : "ok")
            };

            await import("node:fs/promises").then(fs => fs.writeFile("smoke.json", JSON.stringify(out, null, 2)));
            console.log(JSON.stringify(out, null, 2));

            // Always exit 0 so the workflow completes and downstream workflow_run can trigger.
            process.exit(0);
          })();
          EOF

      - name: Run smoke
        env:
          API_URL: ${{ github.event.inputs.api_url || secrets.NF_API_URL }}
          API_KEY: ${{ github.event.inputs.api_key || secrets.NF_API_KEY }}
          SUPPLIER: ${{ github.event.inputs.supplier || 'peekpackaging.com' }}
          REGION:   ${{ github.event.inputs.region   || 'usca' }}
          RADIUS_MI: ${{ github.event.inputs.radiusMi || '50' }}
        run: |
          node --version
          node scripts/find-buyers-smoke.mjs

      - name: Upload canonical artifact (buyers-smoke)
        uses: actions/upload-artifact@v4
        with:
          name: buyers-smoke
          path: backend/smoke.json
          if-no-files-found: error
          overwrite: true