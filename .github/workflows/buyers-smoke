name: buyers-smoke

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Write an inline smoke script directly into the correct, capitalized path.
      - name: Write smoke runner (Backend/scripts/buyers-smoke.mjs)
        run: |
          mkdir -p Backend/scripts artifacts
          cat > Backend/scripts/buyers-smoke.mjs <<'EOF'
          #!/usr/bin/env node
          import fs from "node:fs";
          import path from "node:path";

          const NF_API_URL = process.env.NF_API_URL;
          const NF_API_KEY = process.env.NF_API_KEY;

          const outDir = path.resolve(process.cwd(), "artifacts");
          fs.mkdirSync(outDir, { recursive: true });
          const outFile = path.join(outDir, "smoke.json");

          const result = {
            ok: false,
            empty: true,
            nonDemoCount: 0,
            error: null,
            url: NF_API_URL || null,
            startedAt: new Date().toISOString(),
          };

          async function main() {
            if (!NF_API_URL) {
              result.error = "NF_API_URL missing";
              return finish();
            }
            try {
              const payload = {
                supplier: "peakpackaging.com",   // example US packaging supplier
                region: "us",
                radiusMi: 100
              };

              const res = await fetch(`${NF_API_URL}/api/v1/leads/find-buyers`, {
                method: "POST",
                headers: {
                  "content-type": "application/json",
                  "x-api-key": process.env.NF_API_KEY || ""
                },
                body: JSON.stringify(payload),
              });

              const text = await res.text();
              let json;
              try { json = JSON.parse(text); } catch { json = { raw: text }; }

              result.http = { status: res.status };
              result.response = json;

              const candidates = Array.isArray(json?.candidates) ? json.candidates : [];
              const nonDemo = candidates.filter(c => c?.source !== "DEMO_SOURCE");
              result.nonDemoCount = nonDemo.length;
              result.empty = nonDemo.length === 0;
              result.ok = !!json?.ok;

            } catch (e) {
              result.error = e?.message || String(e);
            } finally {
              finish();
            }
          }

          function finish() {
            result.finishedAt = new Date().toISOString();
            fs.writeFileSync(outFile, JSON.stringify(result, null, 2));
            console.log("SMOKE:", JSON.stringify({
              ok: result.ok,
              nonDemo: result.nonDemoCount,
              empty: result.empty,
              status: result.http?.status,
              error: result.error
            }));
          }

          await main();
          EOF
          chmod +x Backend/scripts/buyers-smoke.mjs

      - name: Run smoke
        env:
          NF_API_URL: ${{ secrets.NF_API_URL }}
          NF_API_KEY: ${{ secrets.NF_API_KEY }}
        run: node Backend/scripts/buyers-smoke.mjs

      - name: Upload canonical artifact (buyers-smoke)
        uses: actions/upload-artifact@v4
        with:
          name: buyers-smoke
          path: artifacts/smoke.json
