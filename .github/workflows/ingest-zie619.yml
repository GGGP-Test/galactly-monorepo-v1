name: Ingest leads from Zie619 (public)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/5 * * * *"   # every 5 minutes

jobs:
  ingest:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      API_BASE: ${{ secrets.API_BASE }}   # e.g. https://p01--animated-cellar--vz4ftkwrzdfs.code.run
    steps:
      - name: Install jq & python
        run: sudo apt-get update -y && sudo apt-get install -y jq python3

      - name: Fetch repos from Zie619
        run: |
          curl -sSL -H 'Accept: application/vnd.github+json' \
            "https://api.github.com/users/Zie619/repos?per_page=100&sort=updated" \
            | jq 'map({name,homepage,description,topics,owner:(.owner.login)})' > rows.json
          cat rows.json

      - name: Extract domains
        id: doms
        run: |
          python3 - <<'PY' rows.json
          import json, re, sys, urllib.parse
          rows = json.load(open('rows.json'))
          def to_host(s):
              if not s: return None
              s = s.strip()
              try:
                  u = urllib.parse.urlparse(s if '://' in s else 'https://' + s)
                  h = (u.hostname or '').lower()
              except Exception:
                  h = s.lower().split('/')[0]
              if h.startswith('www.'): h = h[4:]
              return h if '.' in h and not h.endswith('github.com') else None
          out = []
          for r in rows:
              host = to_host(r.get('homepage')) or to_host(r.get('description',''))
              if not host and r.get('owner'):
                  host = f"{r['owner'].lower()}.github.io"
              if host:
                  out.append({
                      "host": host,
                      "platform": "web",
                      "title": f"Repo {r.get('name','')} â€” possible buyer @ {r.get('owner','')}",
                      "description": r.get('description') or "",
                      "topics": r.get('topics') or [],
                      "temp": "warm"
                  })
          print(json.dumps(out))
          PY > doms.json
          echo "DOMS=$(cat doms.json)" >> $GITHUB_OUTPUT

      - name: POST to /api/ingest/github
        env:
          DOMS: ${{ steps.doms.outputs.DOMS }}
        run: |
          set -e
          echo "$DOMS" | jq -c . > doms.json
          JSON=$(jq -c '{items: .}' doms.json)
          curl -sS -X POST "$API_BASE/api/ingest/github" \
            -H 'content-type: application/json' \
            --data "$JSON" | jq .