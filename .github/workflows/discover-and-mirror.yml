name: Discover and Mirror External Repos (License-Aware)

on:
  schedule: [{ cron: "7 * * * *" }]   # every hour at :07
  workflow_dispatch: {}

env:
  SOURCE_USER: "zie619"               # <- change if needed
  TARGET_ORG:  "galactyl-feeds"       # <- your private org for mirrors
  VISIBILITY:  "private"
  # SPDX licenses we will mirror (permissive)
  ALLOWED_SPDX: "MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause,ISC"

jobs:
  mirror:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout this repo (to write report artifacts if we want later)
        uses: actions/checkout@v4

      - name: Install git, jq, gh
        run: |
          sudo apt-get update -y
          sudo apt-get install -y git jq
          if ! command -v gh >/dev/null 2>&1; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg \
              | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" \
              | sudo tee /etc/apt/sources.list.d/github-cli.list >/dev/null
            sudo apt-get update -y && sudo apt-get install -y gh
          fi

      - name: Auth gh
        env:
          GH_TOKEN: ${{ secrets.MIRROR_TOKEN }}
        run: gh auth status || gh auth login --with-token <<<"$GH_TOKEN"

      - name: Fetch repos from source user (with license info)
        id: list
        env:
          GH_TOKEN: ${{ secrets.MIRROR_TOKEN }}
        run: |
          gh api -H "Accept: application/vnd.github+json" \
            /users/${SOURCE_USER}/repos?per_page=100 > repos.json

          # Build two lists based on license SPDX id
          ALLOWED="$(echo "${ALLOWED_SPDX}" | tr ',' '\n' | sed 's/^[ ]*//;s/[ ]*$//')"

          jq -r --argjson allowed "[\"$(echo "$ALLOWED" | paste -sd '","' -)\"]" '
            .[] | {name, license: (.license // {}), clone_url, html_url} |
            . + { spdx: (.license.spdx_id // "NOLICENSE") }
          ' repos.json > repos_slim.json

          # filter allowed
          jq -r --argjson allowed "[\"$(echo "$ALLOWED" | paste -sd '","' -)\"]" '
            map(select(.spdx as $s | $allowed | index($s))) | .[]
            | .name
          ' repos_slim.json > allowed.txt

          # filter skipped
          jq -r --argjson allowed "[\"$(echo "$ALLOWED" | paste -sd '","' -)\"]" '
            map(select(.spdx as $s | ($allowed | index($s)) | not)) | .[]
            | "\(.name)\t\(.spdx)"
          ' repos_slim.json > skipped.tsv

          echo "allowed_count=$(wc -l < allowed.txt | tr -d ' ')" >> $GITHUB_OUTPUT
          echo "skipped_count=$(wc -l < skipped.tsv | tr -d ' ')" >> $GITHUB_OUTPUT

      - name: Ensure mirror repos exist in target org (only allowed)
        if: steps.list.outputs.allowed_count != '0'
        env:
          GH_TOKEN: ${{ secrets.MIRROR_TOKEN }}
        run: |
          while read -r NAME; do
            [ -z "$NAME" ] && continue
            if gh repo view "${TARGET_ORG}/${NAME}" >/dev/null 2>&1; then
              echo "repo exists: ${TARGET_ORG}/${NAME}"
            else
              echo "creating: ${TARGET_ORG}/${NAME}"
              gh repo create "${TARGET_ORG}/${NAME}" --private --confirm --disable-issues --disable-wiki
            fi
          done < allowed.txt

      - name: Mirror push each allowed repo (all branches/tags)
        if: steps.list.outputs.allowed_count != '0'
        env:
          GH_TOKEN: ${{ secrets.MIRROR_TOKEN }}
        run: |
          git config --global init.defaultBranch main
          while read -r NAME; do
            [ -z "$NAME" ] && continue
            SRC="https://github.com/${SOURCE_USER}/${NAME}.git"
            DST="https://${GH_TOKEN}@github.com/${TARGET_ORG}/${NAME}.git"
            echo "::group::Mirroring $NAME"
            rm -rf work && mkdir -p work && cd work
            if git clone --mirror "$SRC" repo; then
              cd repo
              git remote set-url --push origin "$DST"
              git push --mirror || echo "push failed for $NAME"
            else
              echo "clone failed for $NAME"
            fi
            cd ../..; rm -rf work
            echo "::endgroup::"
          done < allowed.txt

      - name: Summarize
        run: |
          echo "### License-aware mirroring" >> $GITHUB_STEP_SUMMARY
          echo "- Allowed (mirrored): $(wc -l < allowed.txt | tr -d ' ')" >> $GITHUB_STEP_SUMMARY
          echo "- Skipped (non-permissive or no license): $(wc -l < skipped.tsv | tr -d ' ')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Skipped list (name — license)" >> $GITHUB_STEP_SUMMARY
          if [ -s skipped.tsv ]; then
            awk -F'\t' '{printf "- %s — %s\n", $1, $2}' skipped.tsv >> $GITHUB_STEP_SUMMARY
          else
            echo "- (none)" >> $GITHUB_STEP_SUMMARY
          fi