name: Ingest GitHub Repos â†’ Buyers API

on:
  workflow_dispatch: {}
  schedule:
    - cron: "*/30 * * * *"   # every 30 minutes

permissions:
  contents: read

concurrency:
  group: ingest-github
  cancel-in-progress: false

env:
  # CHANGE this to your org handle (the one that now owns the mirrored repos)
  TARGET_ORG: GGGPL
  # CHANGE this to your buyers API base (your green deploy)
  API_BASE: https://p01--animated-cellar--vz4ftkwrzdfs.code.run

jobs:
  ingest:
    runs-on: ubuntu-latest
    steps:
      - name: Install gh (CLI)
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Fetch public repos (updated)
        id: repos
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh api -H "Accept: application/vnd.github+json" \
            "/orgs/${TARGET_ORG}/repos?per_page=100&type=public&sort=updated" > repos.json
          jq 'length' repos.json

      - name: Build candidate list (homepage + filters)
        run: |
          set -euo pipefail
          # Produce: [{homepage, owner, name, description, topics, archived}]
          jq -r '
            map({
              homepage: (.homepage // ""),
              owner: .owner.login,
              name: .name,
              description: (.description // ""),
              topics: (.topics // []),
              archived: (.archived // false)
            })
            # If homepage is missing, try to infer a domain from description (skip github domains)
            | map(. + {homepage:
                (if (.homepage|length>0) then .homepage
                 else ((.description|capture("(?<d>[A-Za-z0-9.-]+\\.[A-Za-z]{2,})")?.d // ""))
                      | select((.|length)>0)
                      | select(test("github\\.com$")==false)
                      | "https://" + .
                 end)
              })
            | map(select((.homepage|length)>0 and (.archived|not)))
          ' repos.json > rows.json
          echo "candidates: $(jq 'length' rows.json)"

      - name: POST each lead to Buyers API
        run: |
          set -euo pipefail
          n=$(jq 'length' rows.json)
          if [ "$n" -eq 0 ]; then
            echo "No candidates."
            exit 0
          fi
          for i in $(seq 0 $((n-1))); do
            row=$(jq -c ".[$i]" rows.json)
            echo "POST -> $API_BASE/api/ingest/github"
            echo "$row" | jq .
            curl -sS --fail-with-body -X POST "$API_BASE/api/ingest/github" \
              -H 'content-type: application/json' \
              -d "$row" || true
          done